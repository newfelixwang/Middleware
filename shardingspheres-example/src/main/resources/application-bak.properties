
# shardingsphere

spring.shardingsphere.datasource.names=ds0,ds1


spring.shardingsphere.datasource.ds0.url=jdbc:mysql://localhost:3306/db_0?useSSL=false&useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
spring.shardingsphere.datasource.ds0.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds0.username=root
spring.shardingsphere.datasource.ds0.password=123456


spring.shardingsphere.datasource.ds1.url=jdbc:mysql://localhost:3306/db_1?useSSL=false&useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
spring.shardingsphere.datasource.ds1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds1.username=root
spring.shardingsphere.datasource.ds1.password=123456

# 分库策略
#用主键做分库
spring.shardingsphere.sharding.default-database-strategy.standard.sharding-column=id
#指定自定义分库实现类
spring.shardingsphere.sharding.default-database-strategy.standard.precise-algorithm-class-name=com.felixwang.site.config.ShardingDatabaseAlgorithm



#分表策略
# user分表
# user_0,user_1,user_2（自定义分表算法）
spring.shardingsphere.sharding.tables.user.actual-data-nodes=ds$->{0..1}.user_$->{0..1}
spring.shardingsphere.sharding.tables.user.table-strategy.standard.sharding-column=age
#自定义分表实现类
spring.shardingsphere.sharding.tables.user.table-strategy.standard.precise-algorithm-class-name=com.felixwang.site.config.ShardingTableAlgorithm


# company分库分表（在这里直接通过表达式分表,在上面通过自定义实现类分表）

#分库策略,通过用户ID分库,使得用户和company在同一个库中
spring.shardingsphere.sharding.tables.company.actual-data-nodes=ds$->{0..1}.company_$->{0..1}
spring.shardingsphere.sharding.tables.company.database-strategy.inline.sharding-column=ref_user_id
spring.shardingsphere.sharding.tables.company.database-strategy.inline.algorithm-expression=ds${ref_user_id.longValue() % 2}

#分表策略 通过user_age分表 使得company_索引(如company_0、company_1)与user能对应上
spring.shardingsphere.sharding.tables.company.table-strategy.inline.sharding-column=user_age
spring.shardingsphere.sharding.tables.company.table-strategy.inline.algorithm-expression=company_${user_age.longValue() % 2}


## 默认数据源指定（不分库的表）
spring.shardingsphere.sharding.default-data-source-name=ds0


mybatis-plus.type-aliases-package=com.felixwang.site.entity
